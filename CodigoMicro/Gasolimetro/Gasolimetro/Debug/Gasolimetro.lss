
Gasolimetro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000192  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000740  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000669  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f9  00000000  00000000  00000ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a6  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000a8  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 82 00 	call	0x104	; 0x104 <main>
  74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
void usar_transmit(int data);
//VARIABLE PARA CONTAR EL NUMERO DE PULSOS
int8_t numPulsos;


ISR(INT0_vect){
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	numPulsos++;
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8e:	8f 5f       	subi	r24, 0xFF	; 255
  90:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	PORTA^=(1<<0);
  94:	9b b3       	in	r25, 0x1b	; 27
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	89 27       	eor	r24, r25
  9a:	8b bb       	out	0x1b, r24	; 27
}
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <configurarPuertos>:
	//Enviamos los datos
	usar_transmit(frecuencia);
}
void configurarPuertos(){
	// Se configuran los puertos a utilizar
	cli(); // Deshabilita las interrupciones
  aa:	f8 94       	cli
	DDRA = (1<<0); // Habilitamos el PIN0 del puerto A como salida
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	8a bb       	out	0x1a, r24	; 26
	MCUCR |= (1<<ISC01) |(1<<ISC00); //INT0 flanco de subida
  b0:	85 b7       	in	r24, 0x35	; 53
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<INT0); // INT0 habilitada
  b6:	8b b7       	in	r24, 0x3b	; 59
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	8b bf       	out	0x3b, r24	; 59
  bc:	08 95       	ret

000000be <usar_init>:
}

void usar_init(){
	
	UCSRB |= (1<<RXEN)|(1<<TXEN); // Habilitamos la recepcion y transmision de datos
  be:	8a b1       	in	r24, 0x0a	; 10
  c0:	88 61       	ori	r24, 0x18	; 24
  c2:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL)|(1<<USBS)|(3<<UCSZ0); // UCZ0 , UCZ1, UCZ2 indican que se leen 8 bits
  c4:	80 b5       	in	r24, 0x20	; 32
  c6:	8e 68       	ori	r24, 0x8E	; 142
  c8:	80 bd       	out	0x20, r24	; 32
	UBRRH = (BAUD_PRESCALE>>8);
  ca:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;       
  cc:	83 e3       	ldi	r24, 0x33	; 51
  ce:	89 b9       	out	0x09, r24	; 9
  d0:	08 95       	ret

000000d2 <usar_transmit>:
	// into the high byte of the UBRR register
}

void usar_transmit(int data){
	//Esperamos a que el buffer de transmision este vacio
	while(!(UCSRA & (1<<UDRE)))
  d2:	5d 9b       	sbis	0x0b, 5	; 11
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <usar_transmit>
	;
	UDR=data;
  d6:	8c b9       	out	0x0c, r24	; 12
  d8:	08 95       	ret

000000da <obtenerFrecuencia>:
		//usart_msg("ENVIANDO DATOS");    
	}
}
void obtenerFrecuencia(){
	int8_t frecuencia;
	numPulsos = 0;
  da:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	//Va la parte del contador de interrupciones
	sei();// Habilita las interrupciones
  de:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	89 e6       	ldi	r24, 0x69	; 105
  e4:	98 e1       	ldi	r25, 0x18	; 24
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <obtenerFrecuencia+0xc>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <obtenerFrecuencia+0x16>
  f0:	00 00       	nop
	_delay_ms(1000); // Esperamos un segundo
	cli();// detenemos las interrupciones
  f2:	f8 94       	cli
	frecuencia = numPulsos; // HZ (Cantidad de pulsos por segundo)
	//Enviamos los datos
	usar_transmit(frecuencia);
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f8:	08 2e       	mov	r0, r24
  fa:	00 0c       	add	r0, r0
  fc:	99 0b       	sbc	r25, r25
  fe:	0e 94 69 00 	call	0xd2	; 0xd2 <usar_transmit>
 102:	08 95       	ret

00000104 <main>:
	numPulsos++;
	PORTA^=(1<<0);
}
int main(void)
{
	configurarPuertos();
 104:	0e 94 55 00 	call	0xaa	; 0xaa <configurarPuertos>
	usar_init();
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <usar_init>
	char x = 'r';
	usar_transmit(x);
 10c:	82 e7       	ldi	r24, 0x72	; 114
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	0e 94 69 00 	call	0xd2	; 0xd2 <usar_transmit>
	while (1) 
    {
		//Enviamos datos a traves del modulo bluetooth
		obtenerFrecuencia();
 114:	0e 94 6d 00 	call	0xda	; 0xda <obtenerFrecuencia>
 118:	fd cf       	rjmp	.-6      	; 0x114 <main+0x10>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
